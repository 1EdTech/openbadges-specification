{
    "swagger" : "2.0",
    "info" : {
        "version" : "2.1",
        "title" : "Open Badges OpenAPI (JSON) Definition",
        "description" : "@@@TBD",
        "termsOfService" : "Permission is granted to all parties to use excerpts from this document as needed in producing requests for proposals. The limited permissions granted above are perpetual and will not be revoked by IMS or its successors or assigns. THIS API DEFINITION IS BEING OFFERED WITHOUT ANY WARRANTY WHATSOEVER, AND IN PARTICULAR, ANY WARRANTY OF NONINFRINGEMENT IS EXPRESSLY DISCLAIMED. ANY USE OF THIS SPECIFICATION SHALL BE MADE ENTIRELY AT THE IMPLEMENTERS OWN RISK, AND NEITHER THE  CONSORTIUM, NOR ANY OF ITS MEMBERS OR SUBMITTERS, SHALL HAVE ANY LIABILITY WHATSOEVER TO ANY IMPLEMENTER OR THIRD PARTY FOR ANY DAMAGES OF ANY NATURE WHATSOEVER,  DIRECTLY OR INDIRECTLY, ARISING FROM THE USE OF THIS API DEFINITION.",
        "contact" : {
            "name" : "Lisa Mattson (COO), IMS Global ",
            "url" : "http://www.imsglobal.org",
            "email" : "lmattson@imsglobal.org"
        },
        "license" : {
            "name" : "IMS Global",
            "url" : "https://www.imsglobal.org/license.html"
        }
    },
    "host" : "www.imsglobal.org",
    "basePath" : "/ims/ob/v2p1",
    "schemes" : [ "http","https" ],
    "tags" : [
        {
            "name" : "OBC-Service",
            "description" : "Open Badges Connect API"
        }
    ],
    "securityDefinitions" : {
        "OAuth2Security" : {
            "type" : "oauth2",
            "description" : "The standard usage of OAuth 2.0 Client Credentials by IMS Global",
            "flow" : "application",
            "tokenUrl" : "http://www.imsglobal.org",
            "scopes" : {

            }
        }
    },
    "security" : [
        { "OAuth2Security" : [  ] }
    ],
    "paths" : {
        "/assertions" : {
            "get" : {
                "operationId" : "getAssertions",
                "summary" : "The REST read request message for the getAssertions() API call.",
                "tags" : [ "OBC-Service" ],
                "description" : "Fetch Assertions for the supplied parameters and authentication token.",
                "parameters" : [
                    {
                        "name" : "limit",
                        "in" : "query",
                        "description" : "Indicate how many results should be retrieved in a single page.",
                        "required" : false,
                        "type" : "integer",
                        "format" : "int32",
                        "minimum" : 1,
                        "allowEmptyValue" : false
                    },
                    {
                        "name" : "offset",
                        "in" : "query",
                        "description" : "Indicate the index of the first record to return (zero indexed).",
                        "required" : false,
                        "type" : "integer",
                        "format" : "int32",
                        "minimum" : 0,
                        "allowEmptyValue" : false
                    },
                    {
                        "name" : "since",
                        "in" : "query",
                        "description" : "Retrieve Assertions that were created or updated after the provided timestamp. Must be an ISO 8601 compatible timestamp with a time zone indicator.",
                        "required" : false,
                        "type" : "string",
                        "format" : "date-time",
                        "allowEmptyValue" : false
                    }
                ],
                "responses" : {
                    "200" : {
                        "description" : "This is the response when the request has been completed successfully.",
                        "schema" : {
                            "$ref" : "#/definitions/ResponseEnvelopeDType"
                        }
                    },
                    "400" : {
                        "description" : "An invalid request was made.",
                        "schema" : {
                            "$ref" : "#/definitions/ErrorResponseDType"
                        }
                    },
                    "401" : {
                        "description" : "The request was not correctly authorized.",
                        "schema" : {
                            "$ref" : "#/definitions/ErrorResponseDType"
                        }
                    },
                    "404" : {
                        "description" : "The requested resource does not exist.",
                        "schema" : {
                            "$ref" : "#/definitions/ErrorResponseDType"
                        }
                    },
                    "405" : {
                        "description" : "This method is not allowed on the endpoint.",
                        "schema" : {
                            "$ref" : "#/definitions/ErrorResponseDType"
                        }
                    },
                    "500" : {
                        "description" : "This code should be used only if there is catastrophic error."
                    },
                    "default" : {
                        "description" : "Any other response."
                    }
                }
            },
            "post" : {
                "operationId" : "postAssertion",
                "summary" : "The REST update request message for the postAssertion() API call.",
                "tags" : [ "OBC-Service" ],
                "description" : "Create or update an Assertion.",
                "parameters" : [
                    {
                        "name" : "assertions",
                        "in" : "body",
                        "description" : "The Assertion to be created or updated. Data MUST be a list exactly one Assertion long.",
                        "required" : true,
                        "schema" : {
                            "$ref" : "#/definitions/AssertionDType"
                        }
                    }
                ],
                "responses" : {
                    "200" : {
                        "description" : "The Assertion was updated successfully.",
                        "schema" : {
                            "$ref" : "#/definitions/ResponseEnvelopeDType"
                        }
                    },
                    "400" : {
                        "description" : "An invalid request was made.",
                        "schema" : {
                            "$ref" : "#/definitions/ErrorResponseDType"
                        }
                    },
                    "401" : {
                        "description" : "The request was not correctly authorized.",
                        "schema" : {
                            "$ref" : "#/definitions/ErrorResponseDType"
                        }
                    },
                    "404" : {
                        "description" : "The requested resource does not exist.",
                        "schema" : {
                            "$ref" : "#/definitions/ErrorResponseDType"
                        }
                    },
                    "405" : {
                        "description" : "This method is not allowed on the endpoint.",
                        "schema" : {
                            "$ref" : "#/definitions/ErrorResponseDType"
                        }
                    },
                    "500" : {
                        "description" : "This code should be used only if there is catastrophic error."
                    },
                    "default" : {
                        "description" : "Any other response."
                    }
                }
            }
        },
        "/profile" : {
            "get" : {
                "operationId" : "getProfile",
                "summary" : "The REST read request message for the getProfile() API call.",
                "tags" : [ "OBC-Service" ],
                "description" : "Fetch the profile for the supplied authentication token.",
                "responses" : {
                    "200" : {
                        "description" : "This is the response when the request has been completed successfully.",
                        "schema" : {
                            "$ref" : "#/definitions/ResponseEnvelopeDType"
                        }
                    },
                    "400" : {
                        "description" : "An invalid request was made.",
                        "schema" : {
                            "$ref" : "#/definitions/ErrorResponseDType"
                        }
                    },
                    "401" : {
                        "description" : "The request was not correctly authorized.",
                        "schema" : {
                            "$ref" : "#/definitions/ErrorResponseDType"
                        }
                    },
                    "404" : {
                        "description" : "The requested resource does not exist.",
                        "schema" : {
                            "$ref" : "#/definitions/ErrorResponseDType"
                        }
                    },
                    "405" : {
                        "description" : "This method is not allowed on the endpoint.",
                        "schema" : {
                            "$ref" : "#/definitions/ErrorResponseDType"
                        }
                    },
                    "500" : {
                        "description" : "This code should be used only if there is catastrophic error."
                    },
                    "default" : {
                        "description" : "Any other response."
                    }
                }
            },
            "post" : {
                "operationId" : "postProfile",
                "summary" : "The REST update request message for the postProfile() API call.",
                "tags" : [ "OBC-Service" ],
                "description" : "Update the profile for the authenticated user.",
                "parameters" : [
                    {
                        "name" : "profile",
                        "in" : "body",
                        "description" : "The authenticated user's profile.",
                        "required" : true,
                        "schema" : {
                            "$ref" : "#/definitions/ProfileDType"
                        }
                    }
                ],
                "responses" : {
                    "200" : {
                        "description" : "This is the response when the request has been completed successfully.",
                        "schema" : {
                            "$ref" : "#/definitions/ResponseEnvelopeDType"
                        }
                    },
                    "400" : {
                        "description" : "An invalid request was made.",
                        "schema" : {
                            "$ref" : "#/definitions/ErrorResponseDType"
                        }
                    },
                    "401" : {
                        "description" : "The request was not correctly authorized.",
                        "schema" : {
                            "$ref" : "#/definitions/ErrorResponseDType"
                        }
                    },
                    "404" : {
                        "description" : "The requested resource does not exist.",
                        "schema" : {
                            "$ref" : "#/definitions/ErrorResponseDType"
                        }
                    },
                    "405" : {
                        "description" : "This method is not allowed on the endpoint.",
                        "schema" : {
                            "$ref" : "#/definitions/ErrorResponseDType"
                        }
                    },
                    "500" : {
                        "description" : "This code should be used only if there is catastrophic error."
                    },
                    "default" : {
                        "description" : "Any other response."
                    }
                }
            }
        }
    },
    "definitions" : {
        "AlignmentObjectDType" : {
            "description" : "The AlignmentObject is an alias for schema.org’s AlignmentObject and uses IRIs from that vocabulary.",
            "type" : "object",
            "properties" : {
                "targetName" : {
                    "description" : "Model Primitive Datatype = String. Name of the alignment.",
                    "type" : "string"
                },
                "targetUrl" : {
                    "description" : "Model Primitive Datatype = AnyURI. URL linking to the official description of the alignment target, for example an individual standard within an educational framework.",
                    "type" : "string",
                    "format" : "uri"
                },
                "targetDescription" : {
                    "description" : "Model Primitive Datatype = String. Short description of the alignment target.",
                    "type" : "string"
                },
                "targetFramework" : {
                    "description" : "Model Primitive Datatype = String. Name of the framework the alignment target.",
                    "type" : "string"
                },
                "targetCode" : {
                    "description" : "Model Primitive Datatype = String. If applicable, a locally unique string identifier that identifies the alignment target within its framework and/or targetUrl.",
                    "type" : "string"
                }
            },
            "required" : [ "targetName","targetUrl" ],
            "additionalProperties" : false
        },
        "AnyDType" : {
            "description" : "Generic object.",
            "type" : "object",
            "properties" : {

            },
            "additionalProperties" : true
        },
        "AssertionDType" : {
            "description" : "Assertions are representations of an awarded badge, used to share information about a badge belonging to one earner.",
            "type" : "object",
            "properties" : {
                "@context" : {
                    "$ref" : "#/definitions/contextDType"
                },
                "id" : {
                    "$ref" : "#/definitions/idDType"
                },
                "type" : {
                    "$ref" : "#/definitions/typeDType"
                },
                "recipient" : {
                    "$ref" : "#/definitions/IdentityObjectDType"
                },
                "badge" : {
                    "$ref" : "#/definitions/idDType"
                },
                "verification" : {
                    "$ref" : "#/definitions/VerificationObjectDType"
                },
                "issuedOn" : {
                    "description" : "Model Primitive Datatype = DateTime. Timestamp of when the achievement was awarded.",
                    "type" : "string",
                    "format" : "date-time"
                },
                "image" : {
                    "$ref" : "#/definitions/idDType"
                },
                "evidence" : {
                    "description" : "IRI or document describing the work that the recipient did to earn the achievement. This can be a page that links out to other pages if linking directly to the work is infeasible.",
                    "type" : "array",
                    "minItems" : 0,
                    "items" : {
                        "$ref" : "#/definitions/idDType"
                    }
                },
                "narratrive" : {
                    "description" : "Model Primitive Datatype = String. A narrative that connects multiple pieces of evidence. Likely only present at this location if evidence is a multi-value array.",
                    "type" : "string"
                },
                "expires" : {
                    "description" : "Model Primitive Datatype = DateTime. If the achievement has some notion of expiry, this indicates a timestamp when a badge should no longer be considered valid. After this time, the badge should be considered expired.",
                    "type" : "string",
                    "format" : "date-time"
                },
                "revoked" : {
                    "description" : "Model Primitive Datatype = Boolean. Defaults to false if Assertion is not referenced from a revokedAssertions list and may be omitted. See RevocationList. If revoked is true, only revoked and id are required properties, and many issuers strip a hosted Assertion down to only those properties when revoked.",
                    "type" : "boolean"
                },
                "revocationReason" : {
                    "description" : "Model Primitive Datatype = String. Optional published reason for revocation, if revoked.",
                    "type" : "string"
                },
                "endorsement" : {
                    "description" : "...tbd (ComplexType property description)...",
                    "type" : "array",
                    "minItems" : 0,
                    "items" : {
                        "$ref" : "#/definitions/EndorsementDType"
                    }
                }
            },
            "required" : [ "@context","id","type","recipient","badge","verification","issuedOn" ],
            "additionalProperties" : true
        },
        "BadgeClassDType" : {
            "description" : "A collection of information about the accomplishment recognized by the Open Badge.",
            "type" : "object",
            "properties" : {
                "id" : {
                    "$ref" : "#/definitions/idDType"
                },
                "type" : {
                    "$ref" : "#/definitions/typeDType"
                },
                "name" : {
                    "description" : "Model Primitive Datatype = String. The name of the achievement.",
                    "type" : "string"
                },
                "description" : {
                    "description" : "Model Primitive Datatype = String. A short description of the achievement.",
                    "type" : "string"
                },
                "image" : {
                    "$ref" : "#/definitions/idDType"
                },
                "criteria" : {
                    "$ref" : "#/definitions/idDType"
                },
                "issuer" : {
                    "$ref" : "#/definitions/idDType"
                },
                "alignment" : {
                    "description" : "An object describing which objectives or educational standards this badge aligns to, if any.",
                    "type" : "array",
                    "minItems" : 0,
                    "items" : {
                        "$ref" : "#/definitions/AlignmentObjectDType"
                    }
                },
                "tags" : {
                    "description" : "Model Primitive Datatype = String. A tag that describes the type of achievement.",
                    "type" : "array",
                    "minItems" : 0,
                    "items" : {
                        "type" : "string"
                    }
                },
                "related" : {
                    "description" : "...tbd (ComplexType property description)...",
                    "type" : "array",
                    "minItems" : 0,
                    "items" : {
                        "$ref" : "#/definitions/BadgeClassDType"
                    }
                },
                "version" : {
                    "description" : "Model Primitive Datatype = String. The version identifier for the present edition of the entity.",
                    "type" : "string"
                },
                "endorsement" : {
                    "description" : "...tbd (ComplexType property description)...",
                    "type" : "array",
                    "minItems" : 0,
                    "items" : {
                        "$ref" : "#/definitions/EndorsementDType"
                    }
                }
            },
            "required" : [ "id","type","name","description","image","criteria","issuer" ],
            "additionalProperties" : true
        },
        "ClaimDType" : {
            "description" : "The claim the endorser is making.",
            "type" : "object",
            "properties" : {
                "id" : {
                    "$ref" : "#/definitions/idDType"
                },
                "type" : {
                    "$ref" : "#/definitions/typeDType"
                },
                "endorsementComment" : {
                    "description" : "Model Primitive Datatype = String. The simple claim the endorser is making about the entity.",
                    "type" : "string"
                }
            },
            "required" : [ "id","endorsementComment" ],
            "additionalProperties" : true
        },
        "CriteriaDType" : {
            "description" : "Descriptive metadata about the achievements necessary to be recognized with an Assertion of a particular BadgeClass.",
            "type" : "object",
            "properties" : {
                "id" : {
                    "$ref" : "#/definitions/idDType"
                },
                "type" : {
                    "$ref" : "#/definitions/typeDType"
                },
                "narrative" : {
                    "description" : "Model Primitive Datatype = String. A narrative of what is needed to earn the badge.",
                    "type" : "string"
                }
            },
            "additionalProperties" : false
        },
        "CryptographicKeyDType" : {
            "description" : "Alias for the Key class from the W3C Web Payments Community Group Security Vocabulary. A CryptographicKey document identifies and describes a Key used for signing Open Badges documents.",
            "type" : "object",
            "properties" : {
                "id" : {
                    "$ref" : "#/definitions/idDType"
                },
                "type" : {
                    "$ref" : "#/definitions/typeDType"
                },
                "owner" : {
                    "$ref" : "#/definitions/idDType"
                },
                "publicKeyPem" : {
                    "description" : "Model Primitive Datatype = String. The PEM key encoding is a widely-used method to express public keys, compatible with almost every Secure Sockets Layer library implementation.",
                    "type" : "string"
                }
            },
            "additionalProperties" : false
        },
        "EndorsementDType" : {
            "description" : "...tbd (Class description)...",
            "type" : "object",
            "properties" : {
                "id" : {
                    "$ref" : "#/definitions/idDType"
                },
                "type" : {
                    "$ref" : "#/definitions/typeDType"
                },
                "claim" : {
                    "$ref" : "#/definitions/idDType"
                },
                "issuer" : {
                    "$ref" : "#/definitions/idDType"
                },
                "issuedOn" : {
                    "description" : "Model Primitive Datatype = DateTime. Timestamp of when the endorsement was published.",
                    "type" : "string",
                    "format" : "date-time"
                },
                "verification" : {
                    "$ref" : "#/definitions/VerificationObjectDType"
                }
            },
            "required" : [ "id","type","issuer","issuedOn","verification" ],
            "additionalProperties" : false
        },
        "ErrorResponseDType" : {
            "description" : "...tbd (Class description)...",
            "type" : "object",
            "properties" : {
                "status" : {
                    "$ref" : "#/definitions/StatusDType"
                }
            },
            "required" : [ "status" ],
            "additionalProperties" : false
        },
        "EvidenceDType" : {
            "description" : "Descriptive metadata about evidence related to the issuance of an Assertion.",
            "type" : "object",
            "properties" : {
                "type" : {
                    "$ref" : "#/definitions/typeDType"
                },
                "id" : {
                    "$ref" : "#/definitions/idDType"
                },
                "narrative" : {
                    "description" : "Model Primitive Datatype = String. A narrative that describes the evidence and process of achievement that led to an Assertion.",
                    "type" : "string"
                },
                "name" : {
                    "description" : "Model Primitive Datatype = String. A descriptive title of the evidence.",
                    "type" : "string"
                },
                "description" : {
                    "description" : "Model Primitive Datatype = String. A longer description of the evidence.",
                    "type" : "string"
                },
                "genre" : {
                    "description" : "Model Primitive Datatype = String. A string that describes the type of evidence. For example, Poetry, Prose, Film.",
                    "type" : "string"
                },
                "audience" : {
                    "description" : "Model Primitive Datatype = String. A description of the intended audience for a piece of evidence.",
                    "type" : "string"
                }
            },
            "additionalProperties" : false
        },
        "IdentityObjectDType" : {
            "description" : "A collection of information about the recipient of a badge.",
            "type" : "object",
            "properties" : {
                "identity" : {
                    "description" : "Model Primitive Datatype = String. Either the hash of the identity or the plaintext value. If it’s possible that the plaintext transmission and storage of the identity value would leak personally identifiable information where there is an expectation of privacy, it is strongly recommended that an IdentityHash be used.",
                    "type" : "string"
                },
                "type" : {
                    "$ref" : "#/definitions/typeDType"
                },
                "hashed" : {
                    "description" : "Model Primitive Datatype = Boolean. Whether or not the identity value is hashed.",
                    "type" : "boolean"
                },
                "salt" : {
                    "description" : "Model Primitive Datatype = String. If the recipient is hashed, this should contain the string used to salt the hash. If this value is not provided, it should be assumed that the hash was not salted.",
                    "type" : "string"
                }
            },
            "required" : [ "identity","type","hashed" ],
            "additionalProperties" : false
        },
        "ImageDType" : {
            "description" : "Metadata about images that represent Assertions, BadgeClasses or Profiles.",
            "type" : "object",
            "properties" : {
                "type" : {
                    "$ref" : "#/definitions/typeDType"
                },
                "id" : {
                    "$ref" : "#/definitions/idDType"
                },
                "caption" : {
                    "description" : "Model Primitive Datatype = String. The caption for the image.",
                    "type" : "string"
                },
                "author" : {
                    "$ref" : "#/definitions/idDType"
                }
            },
            "required" : [ "id" ],
            "additionalProperties" : false
        },
        "ProfileDType" : {
            "description" : "A Profile is a collection of information that describes the entity or organization using Open Badges. Issuers must be represented as Profiles, and recipients, endorsers, or other entities may also be represented using this vocabulary. Each Profile that represents an Issuer may be referenced in many BadgeClasses that it has defined. Anyone can create and host an Issuer file to start issuing Open Badges. Issuers may also serve as recipients of Open Badges, often identified within an Assertion by specific properties, like their url or contact email address. An Issuer Profile is a subclass of the general Profile with some additional requirements.",
            "type" : "object",
            "properties" : {
                "id" : {
                    "$ref" : "#/definitions/idDType"
                },
                "type" : {
                    "$ref" : "#/definitions/typeDType"
                },
                "name" : {
                    "description" : "Model Primitive Datatype = String. The name of the entity or organization.",
                    "type" : "string"
                },
                "url" : {
                    "description" : "Model Primitive Datatype = AnyURI. The homepage or social media profile of the entity, whether individual or institutional. Should be a URL/URI Accessible via HTTP.",
                    "type" : "string",
                    "format" : "uri"
                },
                "telephone" : {
                    "description" : "Model Primitive Datatype = String. A phone number for the entity. For maximum compatibility, the value should be expressed as a + and country code followed by the number with no spaces or other punctuation, like +16175551212 (E.164 format).",
                    "type" : "string"
                },
                "description" : {
                    "description" : "Model Primitive Datatype = String. A short description of the issuer entity or organization.",
                    "type" : "string"
                },
                "image" : {
                    "$ref" : "#/definitions/idDType"
                },
                "email" : {
                    "description" : "Model Primitive Datatype = String. Contact address for the individual or organization.",
                    "type" : "string"
                },
                "publicKey" : {
                    "$ref" : "#/definitions/idDType"
                },
                "verification" : {
                    "$ref" : "#/definitions/VerificationObjectDType"
                },
                "revocationList" : {
                    "$ref" : "#/definitions/idDType"
                },
                "endorsement" : {
                    "description" : "...tbd (ComplexType property description)...",
                    "type" : "array",
                    "minItems" : 0,
                    "items" : {
                        "$ref" : "#/definitions/EndorsementDType"
                    }
                }
            },
            "required" : [ "id","type" ],
            "additionalProperties" : true
        },
        "ResponseEnvelopeDType" : {
            "description" : "...tbd (Class description)...",
            "type" : "object",
            "properties" : {
                "status" : {
                    "$ref" : "#/definitions/StatusDType"
                },
                "results" : {
                    "description" : "Can be a list containing a combination of Assertion objects and JWT strings representing signed assertions in response to Assertion endpoints, or a set with only one Profile object in response to Profile endpoints.",
                    "type" : "array",
                    "minItems" : 1,
                    "items" : {
                        "$ref" : "#/definitions/AnyDType"
                    }
                }
            },
            "required" : [ "status","results" ],
            "additionalProperties" : false
        },
        "RevocationListDType" : {
            "description" : "The Revocation List is a document that describes badges an Issuer has revoked that used the signed verification method.",
            "type" : "object",
            "properties" : {
                "type" : {
                    "$ref" : "#/definitions/typeDType"
                },
                "id" : {
                    "$ref" : "#/definitions/idDType"
                },
                "issuer" : {
                    "$ref" : "#/definitions/idDType"
                },
                "revokedAssertions" : {
                    "description" : "A string id or UID-based identification of a badge object that has been revoked.",
                    "type" : "array",
                    "minItems" : 1,
                    "items" : {
                        "$ref" : "#/definitions/idDType"
                    }
                }
            },
            "required" : [ "type","revokedAssertions" ],
            "additionalProperties" : false
        },
        "StatusDType" : {
            "description" : "Response status.",
            "type" : "object",
            "properties" : {
                "error" : {
                    "description" : "Model Primitive Datatype = String. A nullable string and the human-readable message describing the problem.",
                    "type" : "string"
                },
                "statusCode" : {
                    "description" : "Model Primitive Datatype = PositiveInteger. The HTTP status code of the response.",
                    "type" : "integer",
                    "format" : "int32",
                    "minimum" : 1
                },
                "statusText" : {
                    "description" : "A string matching one of the enumerated and allowed values for the given endpoint.",
                    "type" : "string",
                    "enum" : [ "OK","REQUEST_VALIDATION_ERROR","RECIPIENT_PROFILE_MISMATCH","INVALID_BADGE","BAD_REQUEST","UNAUTHENTICATED","PERMISSION_DENIED","NOT_FOUND","METHOD_NOT_ALLOWED" ]
                }
            },
            "required" : [ "statusCode" ],
            "additionalProperties" : false
        },
        "VerificationObjectDType" : {
            "description" : "A collection of information allowing an inspector to verify an Assertion.",
            "type" : "object",
            "properties" : {
                "type" : {
                    "$ref" : "#/definitions/typeDType"
                },
                "verificationProperty" : {
                    "$ref" : "#/definitions/idDType"
                },
                "startsWith" : {
                    "description" : "Model Primitive Datatype = String. The URI fragment that the verification property must start with.",
                    "type" : "array",
                    "minItems" : 0,
                    "items" : {
                        "type" : "string"
                    }
                },
                "allowedOrigins" : {
                    "description" : "Model Primitive Datatype = String. The host registered name subcomponent of an allowed origin.",
                    "type" : "array",
                    "minItems" : 0,
                    "items" : {
                        "type" : "string"
                    }
                },
                "creator" : {
                    "$ref" : "#/definitions/idDType"
                }
            },
            "additionalProperties" : false
        },
        "contextDType" : {
            "description" : "JSON-LD @context.",
            "type" : "object",
            "properties" : {

            },
            "additionalProperties" : false
        },
        "idDType" : {
            "description" : "JSON-LD @id.",
            "type" : "object",
            "properties" : {

            },
            "additionalProperties" : false
        },
        "typeDType" : {
            "description" : "JSON-LD @type.",
            "type" : "object",
            "properties" : {

            },
            "additionalProperties" : false
        }
    },
    "consumes" : [ "application/json" ],
    "produces" : [ "application/json" ]
}
