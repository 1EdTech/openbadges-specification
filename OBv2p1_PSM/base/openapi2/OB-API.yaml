swagger: '2.0'

#####################################################################################
#                               API Information                                     #
#####################################################################################
info: 
    version: '2.1'
    title: Open Badges OpenAPI (YAML) Definition
    description: @@@TBD
    termsOfService: Permission is granted to all parties to use excerpts from this document as needed in producing requests for proposals. The limited permissions granted above are perpetual and will not be revoked by IMS or its successors or assigns. THIS API DEFINITION IS BEING OFFERED WITHOUT ANY WARRANTY WHATSOEVER, AND IN PARTICULAR, ANY WARRANTY OF NONINFRINGEMENT IS EXPRESSLY DISCLAIMED. ANY USE OF THIS SPECIFICATION SHALL BE MADE ENTIRELY AT THE IMPLEMENTERS OWN RISK, AND NEITHER THE  CONSORTIUM, NOR ANY OF ITS MEMBERS OR SUBMITTERS, SHALL HAVE ANY LIABILITY WHATSOEVER TO ANY IMPLEMENTER OR THIRD PARTY FOR ANY DAMAGES OF ANY NATURE WHATSOEVER,  DIRECTLY OR INDIRECTLY, ARISING FROM THE USE OF THIS API DEFINITION.
    contact: 
        name: Lisa Mattson (COO), IMS Global
        url: http://www.imsglobal.org
        email: lmattson@imsglobal.org
    license: 
        name: IMS Global
        url: https://www.imsglobal.org/license.html

#####################################################################################
#                   Host, Base Path, Schemes and Content Types                      #
#####################################################################################
host: www.imsglobal.org
basePath: /ims/ob/v2p1
schemes: 
    - http
    - https
consumes: 
    - application/json
produces: 
    - application/json

#####################################################################################
#                                  Tags                                             #
#####################################################################################
tags: 
    - name: OB-API
      description: |
        Open Badges Connect API

#####################################################################################
#                                 Security                                          #
#####################################################################################
securityDefinitions:
    OAuth2Security:
        type: oauth2
        description: The standard usage of OAuth 2.0 by IMS Global.
        flow: application
        tokenUrl: http://www.imsglobal.org
        scopes: 
            user: All Endpoints

security:
    - OAuth2Security:
        - user

#####################################################################################
#                                   Paths                                           #
#####################################################################################
paths: 
    /assertions:
        get:
            operationId: getAssertions
            summary: The REST read request message for the getAssertions() API call.
            tags: 
                - OB-API
            description: |
                Fetch Assertions for the supplied parameters and authentication token.
            parameters: 
                - name: limit
                  in: query
                  description: |
                      Indicate how many results should be retrieved in a single page.
                  required: false
                  type: integer
                  format: int32
                  allowEmptyValue: false
                  minimum: 1
                - name: offset
                  in: query
                  description: |
                      Indicate the index of the first record to return (zero indexed).
                  required: false
                  type: integer
                  format: int32
                  allowEmptyValue: false
                  minimum: 0
                - name: since
                  in: query
                  description: |
                      Retrieve Assertions that were created or updated after the provided timestamp. Must be an ISO 8601 compatible timestamp with a time zone indicator.
                  required: false
                  type: string
                  format: date-time
                  allowEmptyValue: false
            responses: 
                "200" : 
                    description: |
                        This is the response when the request has been completed successfully.
                    schema: 
                        $ref: "#/definitions/AssertionsResponse.Type"
                "400" : 
                    description: |
                        An invalid request was made.
                    schema: 
                        $ref: "#/definitions/ErrorResponse.Type"
                "401" : 
                    description: |
                        The request was not correctly authorized.
                    schema: 
                        $ref: "#/definitions/ErrorResponse.Type"
                "404" : 
                    description: |
                        The requested resource does not exist.
                    schema: 
                        $ref: "#/definitions/ErrorResponse.Type"
                "405" : 
                    description: |
                        This method is not allowed on the endpoint.
                    schema: 
                        $ref: "#/definitions/ErrorResponse.Type"
                "500" : 
                    description: |
                        This code should be used only if there is catastrophic error.
                    schema: 
                        $ref: "#/definitions/ErrorResponse.Type"
                "default" : 
                    description: |
                        Any other response.
                    schema: 
                        $ref: "#/definitions/ErrorResponse.Type"
        post:
            operationId: postAssertion
            summary: The REST update request message for the postAssertion() API call.
            tags: 
                - OB-API
            description: |
                Create or update an Assertion.
            parameters: 
                - name: assertion
                  in: body
                  description: |
                      The Assertion to be created or updated.
                  required: true
                  schema: 
                      $ref: "#/definitions/Assertion.Type"
            responses: 
                "200" : 
                    description: |
                        The Assertion was updated successfully.
                    schema: 
                        $ref: "#/definitions/AssertionsResponse.Type"
                "201" : 
                    description: |
                        The Assertion was created successfully.
                    schema: 
                        $ref: "#/definitions/AssertionsResponse.Type"
                "400" : 
                    description: |
                        An invalid request was made.
                    schema: 
                        $ref: "#/definitions/ErrorResponse.Type"
                "401" : 
                    description: |
                        The request was not correctly authorized.
                    schema: 
                        $ref: "#/definitions/ErrorResponse.Type"
                "404" : 
                    description: |
                        The requested resource does not exist.
                    schema: 
                        $ref: "#/definitions/ErrorResponse.Type"
                "405" : 
                    description: |
                        This method is not allowed on the endpoint.
                    schema: 
                        $ref: "#/definitions/ErrorResponse.Type"
                "500" : 
                    description: |
                        This code should be used only if there is catastrophic error.
                    schema: 
                        $ref: "#/definitions/ErrorResponse.Type"
                "default" : 
                    description: |
                        Any other response.
                    schema: 
                        $ref: "#/definitions/ErrorResponse.Type"

    /profile:
        get:
            operationId: getProfile
            summary: The REST read request message for the getProfile() API call.
            tags: 
                - OB-API
            description: |
                Fetch the profile for the supplied authentication token.
            responses: 
                "200" : 
                    description: |
                        This is the response when the request has been completed successfully.
                    schema: 
                        $ref: "#/definitions/ProfilesResponse.Type"
                "400" : 
                    description: |
                        An invalid request was made.
                    schema: 
                        $ref: "#/definitions/ErrorResponse.Type"
                "401" : 
                    description: |
                        The request was not correctly authorized.
                    schema: 
                        $ref: "#/definitions/ErrorResponse.Type"
                "404" : 
                    description: |
                        The requested resource does not exist.
                    schema: 
                        $ref: "#/definitions/ErrorResponse.Type"
                "405" : 
                    description: |
                        This method is not allowed on the endpoint.
                    schema: 
                        $ref: "#/definitions/ErrorResponse.Type"
                "500" : 
                    description: |
                        This code should be used only if there is catastrophic error.
                    schema: 
                        $ref: "#/definitions/ErrorResponse.Type"
                "default" : 
                    description: |
                        Any other response.
                    schema: 
                        $ref: "#/definitions/ErrorResponse.Type"
        post:
            operationId: postProfile
            summary: The REST update request message for the postProfile() API call.
            tags: 
                - OB-API
            description: |
                Update the profile for the authenticated user.
            parameters: 
                - name: profile
                  in: body
                  description: |
                      The authenticated user's profile.
                  required: true
                  schema: 
                      $ref: "#/definitions/Profile.Type"
            responses: 
                "200" : 
                    description: |
                        This is the response when the request has been completed successfully.
                    schema: 
                        $ref: "#/definitions/ProfilesResponse.Type"
                "400" : 
                    description: |
                        An invalid request was made.
                    schema: 
                        $ref: "#/definitions/ErrorResponse.Type"
                "401" : 
                    description: |
                        The request was not correctly authorized.
                    schema: 
                        $ref: "#/definitions/ErrorResponse.Type"
                "404" : 
                    description: |
                        The requested resource does not exist.
                    schema: 
                        $ref: "#/definitions/ErrorResponse.Type"
                "405" : 
                    description: |
                        This method is not allowed on the endpoint.
                    schema: 
                        $ref: "#/definitions/ErrorResponse.Type"
                "500" : 
                    description: |
                        This code should be used only if there is catastrophic error.
                    schema: 
                        $ref: "#/definitions/ErrorResponse.Type"
                "default" : 
                    description: |
                        Any other response.
                    schema: 
                        $ref: "#/definitions/ErrorResponse.Type"


#####################################################################################
#                               Definitions                                         #
#####################################################################################
definitions: 
    AlignmentObject.Type:
        description: |
            The AlignmentObject is an alias for schema.org’s AlignmentObject and uses IRIs from that vocabulary.
        type: object
        required: 
            - targetName
            - targetUrl
        properties: 
            targetName: 
                description: Name of the alignment. Model Primitive Datatype = String.
                type: string
            targetUrl: 
                description: URL linking to the official description of the alignment target, for example an individual standard within an educational framework. Model Primitive Datatype = AnyURI.
                type: string
                format: uri
            targetDescription: 
                description: Short description of the alignment target. Model Primitive Datatype = String.
                type: string
            targetFramework: 
                description: Name of the framework the alignment target. Model Primitive Datatype = String.
                type: string
            targetCode: 
                description: If applicable, a locally unique string identifier that identifies the alignment target within its framework and/or targetUrl. Model Primitive Datatype = String.
                type: string
        additionalProperties: false
    Assertion.Type:
        description: |
            Assertions are representations of an awarded badge, used to share information about a badge belonging to one earner.
        type: object
        required: 
            - @context
            - id
            - type
            - recipient
            - badge
            - verification
            - issuedOn
        properties: 
            @context: 
                $ref: "#/definitions/context.Type"
            id: 
                $ref: "#/definitions/id.Type"
            type: 
                $ref: "#/definitions/type.Type"
            recipient: 
                $ref: "#/definitions/IdentityObject.Type"
            badge: 
                $ref: "#/definitions/id.Type"
            verification: 
                $ref: "#/definitions/VerificationObject.Type"
            issuedOn: 
                description: Timestamp of when the achievement was awarded. Model Primitive Datatype = DateTime.
                type: string
                format: date-time
            image: 
                $ref: "#/definitions/id.Type"
            evidence: 
                description: |
                    IRI or document describing the work that the recipient did to earn the achievement. This can be a page that links out to other pages if linking directly to the work is infeasible.
                type: array
                minItems: 0
                items: 
                    $ref: "#/definitions/id.Type"
            narratrive: 
                description: A narrative that connects multiple pieces of evidence. Likely only present at this location if evidence is a multi-value array. Model Primitive Datatype = String.
                type: string
            expires: 
                description: If the achievement has some notion of expiry, this indicates a timestamp when a badge should no longer be considered valid. After this time, the badge should be considered expired. Model Primitive Datatype = DateTime.
                type: string
                format: date-time
            revoked: 
                description: Defaults to false if Assertion is not referenced from a revokedAssertions list and may be omitted. See RevocationList. If revoked is true, only revoked and id are required properties, and many issuers strip a hosted Assertion down to only those properties when revoked. Model Primitive Datatype = Boolean.
                type: boolean
            revocationReason: 
                description: Optional published reason for revocation, if revoked. Model Primitive Datatype = String.
                type: string
            endorsement: 
                description: |
                    ...tbd (ComplexType property description)...
                type: array
                minItems: 0
                items: 
                    $ref: "#/definitions/Endorsement.Type"
        additionalProperties: true
    AssertionsResponse.Type:
        description: |
            Responses from all APIs in this document are wrapped in a JSON envelope.
        type: object
        required: 
            - status
        properties: 
            status: 
                $ref: "#/definitions/Status.Type"
            results: 
                description: |
                    A list of zero or more assertions responsive to the request.
                type: array
                minItems: 0
                items: 
                    $ref: "#/definitions/Assertion.Type"
        additionalProperties: false
    BadgeClass.Type:
        description: |
            A collection of information about the accomplishment recognized by the Open Badge.
        type: object
        required: 
            - id
            - type
            - name
            - description
            - image
            - criteria
            - issuer
        properties: 
            id: 
                $ref: "#/definitions/id.Type"
            type: 
                $ref: "#/definitions/type.Type"
            name: 
                description: The name of the achievement. Model Primitive Datatype = String.
                type: string
            description: 
                description: A short description of the achievement. Model Primitive Datatype = String.
                type: string
            image: 
                $ref: "#/definitions/id.Type"
            criteria: 
                $ref: "#/definitions/id.Type"
            issuer: 
                $ref: "#/definitions/id.Type"
            alignment: 
                description: |
                    An object describing which objectives or educational standards this badge aligns to, if any.
                type: array
                minItems: 0
                items: 
                    $ref: "#/definitions/AlignmentObject.Type"
            tags: 
                description: A tag that describes the type of achievement. Model Primitive Datatype = String.
                type: array
                minItems: 0
                items: 
                    type: string
            related: 
                description: |
                    ...tbd (ComplexType property description)...
                type: array
                minItems: 0
                items: 
                    $ref: "#/definitions/BadgeClass.Type"
            version: 
                description: The version identifier for the present edition of the entity. Model Primitive Datatype = String.
                type: string
            endorsement: 
                description: |
                    ...tbd (ComplexType property description)...
                type: array
                minItems: 0
                items: 
                    $ref: "#/definitions/Endorsement.Type"
        additionalProperties: true
    Claim.Type:
        description: |
            The claim the endorser is making.
        type: object
        required: 
            - id
            - endorsementComment
        properties: 
            id: 
                $ref: "#/definitions/id.Type"
            type: 
                $ref: "#/definitions/type.Type"
            endorsementComment: 
                description: The simple claim the endorser is making about the entity. Model Primitive Datatype = String.
                type: string
        additionalProperties: true
    Criteria.Type:
        description: |
            Descriptive metadata about the achievements necessary to be recognized with an Assertion of a particular BadgeClass.
        type: object
        properties: 
            id: 
                $ref: "#/definitions/id.Type"
            type: 
                $ref: "#/definitions/type.Type"
            narrative: 
                description: A narrative of what is needed to earn the badge. Model Primitive Datatype = String.
                type: string
        additionalProperties: false
    CryptographicKey.Type:
        description: |
            Alias for the Key class from the W3C Web Payments Community Group Security Vocabulary. A CryptographicKey document identifies and describes a Key used for signing Open Badges documents.
        type: object
        properties: 
            id: 
                $ref: "#/definitions/id.Type"
            type: 
                $ref: "#/definitions/type.Type"
            owner: 
                $ref: "#/definitions/id.Type"
            publicKeyPem: 
                description: The PEM key encoding is a widely-used method to express public keys, compatible with almost every Secure Sockets Layer library implementation. Model Primitive Datatype = String.
                type: string
        additionalProperties: false
    Endorsement.Type:
        description: |
            ...not supplied...
        type: object
        required: 
            - id
            - type
            - issuer
            - issuedOn
            - verification
        properties: 
            id: 
                $ref: "#/definitions/id.Type"
            type: 
                $ref: "#/definitions/type.Type"
            claim: 
                $ref: "#/definitions/id.Type"
            issuer: 
                $ref: "#/definitions/id.Type"
            issuedOn: 
                description: Timestamp of when the endorsement was published. Model Primitive Datatype = DateTime.
                type: string
                format: date-time
            verification: 
                $ref: "#/definitions/VerificationObject.Type"
        additionalProperties: false
    ErrorResponse.Type:
        description: |
            ...not supplied...
        type: object
        required: 
            - status
        properties: 
            status: 
                $ref: "#/definitions/Status.Type"
        additionalProperties: false
    Evidence.Type:
        description: |
            Descriptive metadata about evidence related to the issuance of an Assertion.
        type: object
        properties: 
            type: 
                $ref: "#/definitions/type.Type"
            id: 
                $ref: "#/definitions/id.Type"
            narrative: 
                description: A narrative that describes the evidence and process of achievement that led to an Assertion. Model Primitive Datatype = String.
                type: string
            name: 
                description: A descriptive title of the evidence. Model Primitive Datatype = String.
                type: string
            description: 
                description: A longer description of the evidence. Model Primitive Datatype = String.
                type: string
            genre: 
                description: A string that describes the type of evidence. For example, Poetry, Prose, Film. Model Primitive Datatype = String.
                type: string
            audience: 
                description: A description of the intended audience for a piece of evidence. Model Primitive Datatype = String.
                type: string
        additionalProperties: false
    IdentityObject.Type:
        description: |
            A collection of information about the recipient of a badge.
        type: object
        required: 
            - identity
            - type
            - hashed
        properties: 
            identity: 
                description: Either the hash of the identity or the plaintext value. If it’s possible that the plaintext transmission and storage of the identity value would leak personally identifiable information where there is an expectation of privacy, it is strongly recommended that an IdentityHash be used. Model Primitive Datatype = String.
                type: string
            type: 
                $ref: "#/definitions/type.Type"
            hashed: 
                description: Whether or not the identity value is hashed. Model Primitive Datatype = Boolean.
                type: boolean
            salt: 
                description: If the recipient is hashed, this should contain the string used to salt the hash. If this value is not provided, it should be assumed that the hash was not salted. Model Primitive Datatype = String.
                type: string
        additionalProperties: false
    Image.Type:
        description: |
            Metadata about images that represent Assertions, BadgeClasses or Profiles.
        type: object
        required: 
            - id
        properties: 
            type: 
                $ref: "#/definitions/type.Type"
            id: 
                $ref: "#/definitions/id.Type"
            caption: 
                description: The caption for the image. Model Primitive Datatype = String.
                type: string
            author: 
                $ref: "#/definitions/id.Type"
        additionalProperties: false
    Profile.Type:
        description: |
            A Profile is a collection of information that describes the entity or organization using Open Badges. Issuers must be represented as Profiles, and recipients, endorsers, or other entities may also be represented using this vocabulary. Each Profile that represents an Issuer may be referenced in many BadgeClasses that it has defined. Anyone can create and host an Issuer file to start issuing Open Badges. Issuers may also serve as recipients of Open Badges, often identified within an Assertion by specific properties, like their url or contact email address. An Issuer Profile is a subclass of the general Profile with some additional requirements.
        type: object
        required: 
            - id
            - type
        properties: 
            id: 
                $ref: "#/definitions/id.Type"
            type: 
                $ref: "#/definitions/type.Type"
            name: 
                description: The name of the entity or organization. Model Primitive Datatype = String.
                type: string
            url: 
                description: The homepage or social media profile of the entity, whether individual or institutional. Should be a URL/URI Accessible via HTTP. Model Primitive Datatype = AnyURI.
                type: string
                format: uri
            telephone: 
                description: A phone number for the entity. For maximum compatibility, the value should be expressed as a + and country code followed by the number with no spaces or other punctuation, like +16175551212 (E.164 format). Model Primitive Datatype = String.
                type: string
            description: 
                description: A short description of the issuer entity or organization. Model Primitive Datatype = String.
                type: string
            image: 
                $ref: "#/definitions/id.Type"
            email: 
                description: Contact address for the individual or organization. Model Primitive Datatype = String.
                type: string
            publicKey: 
                $ref: "#/definitions/id.Type"
            verification: 
                $ref: "#/definitions/VerificationObject.Type"
            revocationList: 
                $ref: "#/definitions/id.Type"
            endorsement: 
                description: |
                    ...tbd (ComplexType property description)...
                type: array
                minItems: 0
                items: 
                    $ref: "#/definitions/Endorsement.Type"
        additionalProperties: true
    ProfilesResponse.Type:
        description: |
            Responses from all APIs in this document are wrapped in a JSON envelope.
        type: object
        required: 
            - status
        properties: 
            status: 
                $ref: "#/definitions/Status.Type"
            results: 
                description: |
                    A list of zero or more profiles responsive to the request.
                type: array
                minItems: 0
                items: 
                    $ref: "#/definitions/Profile.Type"
        additionalProperties: false
    RevocationList.Type:
        description: |
            The Revocation List is a document that describes badges an Issuer has revoked that used the signed verification method.
        type: object
        required: 
            - type
            - revokedAssertions
        properties: 
            type: 
                $ref: "#/definitions/type.Type"
            id: 
                $ref: "#/definitions/id.Type"
            issuer: 
                $ref: "#/definitions/id.Type"
            revokedAssertions: 
                description: |
                    A string id or UID-based identification of a badge object that has been revoked.
                type: array
                minItems: 1
                items: 
                    $ref: "#/definitions/id.Type"
        additionalProperties: false
    Status.Type:
        description: |
            Response status.
        type: object
        required: 
            - statusCode
        properties: 
            error: 
                description: A nullable string and the human-readable message describing the problem. Model Primitive Datatype = String.
                type: string
            statusCode: 
                description: The HTTP status code of the response. Model Primitive Datatype = PositiveInteger.
                type: integer
                format: int32
                minimum: 1
            statusText: 
                description: |
                    A string matching one of the enumerated and allowed values for the given endpoint.
                type: string
                enum: 
                   - OK
                   - REQUEST_VALIDATION_ERROR
                   - RECIPIENT_PROFILE_MISMATCH
                   - INVALID_BADGE
                   - BAD_REQUEST
                   - UNAUTHENTICATED
                   - PERMISSION_DENIED
                   - NOT_FOUND
                   - METHOD_NOT_ALLOWED
        additionalProperties: false
    VerificationObject.Type:
        description: |
            A collection of information allowing an inspector to verify an Assertion.
        type: object
        properties: 
            type: 
                $ref: "#/definitions/type.Type"
            verificationProperty: 
                $ref: "#/definitions/id.Type"
            startsWith: 
                description: The URI fragment that the verification property must start with. Model Primitive Datatype = String.
                type: array
                minItems: 0
                items: 
                    type: string
            allowedOrigins: 
                description: The host registered name subcomponent of an allowed origin. Model Primitive Datatype = String.
                type: array
                minItems: 0
                items: 
                    type: string
            creator: 
                $ref: "#/definitions/id.Type"
        additionalProperties: false
    context.Type:
        description: |
            JSON-LD @context.
        type: object
        properties: {}
        additionalProperties: false
    id.Type:
        description: |
            JSON-LD @id.
        type: object
        properties: {}
        additionalProperties: false
    type.Type:
        description: |
            JSON-LD @type.
        type: object
        properties: {}
        additionalProperties: false
